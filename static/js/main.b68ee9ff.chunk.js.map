{"version":3,"sources":["components/questiontext.jsx","components/textinput.jsx","components/radioinput.jsx","components/scaleinput.jsx","components/questioninput.jsx","components/question.jsx","App.js","reportWebVitals.js","index.js"],"names":["QuestionText","className","this","props","number","toString","prompt","Component","TextInput","type","placeholder","value","lastAnswer","onChange","e","handleUserInput","RadioInput","radioButtons","radioOptions","options","i","length","push","onClick","generateRadio","ScaleInput","console","log","scale","scaleOptions","min","max","parseInt","generateScale","QuestionInput","getQuestionType","renderProgressionKeys","progressionKeys","questionNumber","numQuestionLength","questionData","handleProgression","handleSubmission","currQuestionData","question","answer","Question","App","state","questionList","questions","target","setState","direction","a","formSubmission","map","method","headers","body","JSON","stringify","id","data","fetch","res","ok","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","json","rawData","ReactDOM","render","StrictMode","survey","document","getElementById","expressCall","renderSurvey"],"mappings":"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","file":"static/js/main.b68ee9ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/questiontext.css\";\n\nclass QuestionText extends Component {\n  render() {\n    return (\n      <div className=\"questionText\">\n        <h1 className=\"counter\">{(this.props.number + 1).toString() + \")\"}</h1>\n        <h1 className=\"prompt\">{this.props.prompt}</h1>\n      </div>\n    );\n  }\n}\n\nexport default QuestionText;\n","import React, { Component } from \"react\";\nimport \"../css/textinput.css\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\nclass TextInput extends Component {\n  render() {\n    return (\n      <form>\n        <TextareaAutosize\n          type=\"text\"\n          className=\"textinput\"\n          placeholder=\"Enter Text here...\"\n          value={this.props.lastAnswer}\n          onChange={(e) => {\n            this.props.handleUserInput(e);\n          }}\n        />\n      </form>\n    );\n  }\n}\n\nexport default TextInput;\n","import React, { Component } from \"react\";\nimport \"../css/radioinput.css\";\nimport \"../css/common.css\";\n\nclass RadioInput extends Component {\n  generateRadio() {\n    let radioButtons = [];\n    const radioOptions = this.props.options;\n    for (let i = 0; i < radioOptions.length; i++) {\n      let className = \"radioButton \";\n      className +=\n        this.props.lastAnswer === radioOptions[i] ? \"active\" : \"inactive\";\n      radioButtons.push(\n        <button\n          className={className}\n          key={i}\n          value={radioOptions[i]}\n          onClick={(e) => {\n            this.props.handleUserInput(e);\n          }}\n        >\n          {radioOptions[i]}\n        </button>\n      );\n    }\n    return radioButtons;\n  }\n  render() {\n    return <div className=\"radioButtonGrid\">{this.generateRadio()}</div>;\n  }\n}\n\nexport default RadioInput;\n","import React, { Component } from \"react\";\nimport \"../css/scaleinput.css\";\nimport \"../css/common.css\";\n\nclass ScaleInput extends Component {\n  highlightScale(e) {\n    console.log(e);\n  }\n  generateScale() {\n    const scale = [];\n    const scaleOptions = this.props.options;\n    for (let i = scaleOptions.min; i <= scaleOptions.max; i++) {\n      let className =\n        parseInt(this.props.lastAnswer) >= i\n          ? \"active scaleValue\"\n          : \"inactive scaleValue\";\n      scale.push(\n        <button\n          key={i}\n          value={i}\n          onClick={(e) => this.props.handleUserInput(e)}\n          className={className}\n        >\n          {i}\n        </button>\n      );\n    }\n    return scale;\n  }\n  render() {\n    return <div className=\"scale\">{this.generateScale()}</div>;\n  }\n}\n\nexport default ScaleInput;\n","import TextInput from \"./textinput.jsx\";\nimport RadioInput from \"./radioinput\";\nimport ScaleInput from \"./scaleinput\";\nimport \"../css/questioninput.css\";\nimport React, { Component } from \"react\";\n\nclass QuestionInput extends Component {\n  render() {\n    return (\n      <div className=\"inputContainer\">\n        {this.getQuestionType()}\n        {this.renderProgressionKeys()}\n      </div>\n    );\n  }\n  renderProgressionKeys() {\n    let progressionKeys = [];\n    const questionNumber = this.props.questionNumber;\n    const numQuestionLength = this.props.questionData.length;\n    if (questionNumber !== 0) {\n      progressionKeys.push(\n        <button\n          key=\"0\"\n          onClick={(e) => {\n            this.props.handleProgression(e);\n          }}\n          className=\"submit\"\n          value=\"back\"\n        >\n          ðŸ¡¸\n        </button>\n      );\n    }\n    if (questionNumber !== numQuestionLength - 1) {\n      progressionKeys.push(\n        <button\n          key=\"1\"\n          onClick={(e) => {\n            this.props.handleProgression(e);\n          }}\n          className=\"submit\"\n          value=\"next\"\n        >\n          ðŸ¡º\n        </button>\n      );\n    }\n    if (questionNumber === numQuestionLength - 1) {\n      progressionKeys.push(\n        <button\n          key=\"2\"\n          onClick={this.props.handleSubmission}\n          className=\"submit\"\n          value=\"submit\"\n        >\n          Submit\n        </button>\n      );\n    }\n    return progressionKeys;\n  }\n\n  getQuestionType() {\n    const questionNumber = this.props.questionNumber;\n    const currQuestionData = this.props.questionData[questionNumber];\n    const questionType = currQuestionData.type;\n    let question = null;\n    switch (questionType) {\n      case \"text\":\n        question = (\n          <TextInput\n            handleUserInput={this.props.handleUserInput}\n            lastAnswer={currQuestionData.answer}\n          />\n        );\n        break;\n      case \"radio\":\n        question = (\n          <RadioInput\n            handleUserInput={this.props.handleUserInput}\n            lastAnswer={currQuestionData.answer}\n            options={currQuestionData.options.options}\n          />\n        );\n        break;\n      case \"scale\":\n        question = (\n          <ScaleInput\n            handleUserInput={this.props.handleUserInput}\n            lastAnswer={currQuestionData.answer}\n            options={currQuestionData.options}\n          />\n        );\n        break;\n      default:\n        question = <TextInput />;\n        break;\n    }\n    return question;\n  }\n}\n\nexport default QuestionInput;\n","import React, { Component } from \"react\";\nimport QuestionText from \"./questiontext\";\nimport QuestionInput from \"./questioninput\";\nimport \"../css/question.css\";\n\nclass Question extends Component {\n  render() {\n    const questionData = this.props.questionData;\n    const questionNumber = this.props.questionNumber;\n    const currQuestionData = questionData[questionNumber];\n    return (\n      <div className=\"questionContainer\">\n        <QuestionText\n          prompt={currQuestionData.question}\n          number={questionNumber}\n        />\n        <QuestionInput\n          handleUserInput={this.props.handleUserInput}\n          questionData={questionData}\n          questionNumber={questionNumber}\n          handleProgression={this.props.handleProgression}\n          handleSubmission={this.props.handleSubmission}\n        />\n      </div>\n    );\n  }\n}\nexport default Question;\n","import \"./App.css\";\nimport Question from \"./components/question\";\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  state = {\n    questionNumber: 0,\n    questionList: this.props.questions,\n  };\n\n  handleUserInput = (e) => {\n    const value = e.target.value;\n    let questionList = [...this.state.questionList];\n    let questionNumber = this.state.questionNumber;\n    questionList[questionNumber] = { ...questionList[questionNumber] };\n    questionList[questionNumber].answer = value;\n    this.setState({ questionList });\n  };\n\n  handleProgression = (e) => {\n    const direction = e.target.value;\n    const questionNumber = this.state.questionNumber;\n    if (direction === \"next\") {\n      this.setState({ questionNumber: questionNumber + 1 });\n    } else {\n      this.setState({ questionNumber: questionNumber - 1 });\n    }\n  };\n  handleSubmission = async () => {\n    const formSubmission = this.state.questionList.map(\n      (question) => question.answer\n    );\n    const surveyID = 20020618;\n    let options = {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({ id: surveyID, data: formSubmission }),\n    };\n    let res = await fetch(\"https://bettersurveys.herokuapp.com\", options);\n    console.log(res.ok);\n  };\n\n  render() {\n    return (\n      <div className=\"background\">\n        <Question\n          handleUserInput={this.handleUserInput}\n          questionNumber={this.state.questionNumber}\n          questionData={this.state.questionList}\n          handleProgression={this.handleProgression}\n          handleSubmission={this.handleSubmission}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// let testExpressServer = (data) => {\n//   async function expressCall() {\n//     let res = await fetch(\"http://localhost:3001?id=20020618\");\n//     console.log(\"yes\");\n//     let rawData = await res.text();\n//     console.log(rawData);\n//   }\n//   async function expressPost(data) {\n//     const surveyID = 20020618;\n//     let options = {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ id: surveyID, data: data }),\n//     };\n//     let res = await fetch(\"http://localhost:3001\", options);\n//     console.log(res.ok);\n//   }\n//\n//   expressCall();\n// };\n//\n// const questionList = [];\n//\n// function createQuestion(questionList, question, type, options) {\n//   const questionObj = {\n//     question: question,\n//     type: type,\n//     answer: undefined,\n//   };\n//   switch (type) {\n//     case \"radio\":\n//     case \"scale\":\n//       questionObj.options = options;\n//       break;\n//     default:\n//       break;\n//   }\n//\n//   questionList.push(questionObj);\n// }\n//\n// createQuestion(\n//   questionList,\n//   \"On a scale from 1-5, how would you rate us?\",\n//   \"scale\",\n//   { min: 1, max: 5, num: 5 }\n// );\n// createQuestion(\n//   questionList,\n//   \"How much wood could a woodchuck chuck if a woodchuck could chuck wood?\",\n//   \"text\"\n// );\n// createQuestion(questionList, \"Which bear is best?\", \"radio\", {\n//   options: [\"brown\", \"black\", \"grizzly\", \"polar\"],\n// });\n// createQuestion(questionList, \"How old are you?\", \"text\");\n// console.log(questionList);\n//\n// testExpressServer(questionList);\nfunction renderSurvey() {\n  async function expressCall() {\n    let res = await fetch(\"https://bettersurveys.herokuapp.com?id=20020618\");\n    console.log(\"yes\");\n    let rawData = await res.json();\n    ReactDOM.render(\n      <React.StrictMode>\n        <App questions={rawData[0].survey} />\n      </React.StrictMode>,\n      document.getElementById(\"root\")\n    );\n  }\n  expressCall();\n}\n\nrenderSurvey();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}